class BST {
    static class Node {
        int value;
        Node left, right;

        Node(int value) {
            this.value = value;
            left = right = null;
        }
    }

    private Node root;

    public BST() {
        root = null;
    }

    // Insert a new value into the BST
    public void insert(int value) {
        root = insertRec(root, value);
    }

    private Node insertRec(Node root, int value) {
        if (root == null) {
            root = new Node(value);
            return root;
        }
        if (value < root.value) {
            root.left = insertRec(root.left, value);
        } else if (value > root.value) {
            root.right = insertRec(root.right, value);
        }
        return root;
    }

    // In-order traversal of the BST
    public void inorder() {
        inorderRec(root);
        System.out.println();
    }

    private void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.value + " ");
            inorderRec(root.right);
        }
    }

    // Search for a value in the BST
    public boolean search(int value) {
        return searchRec(root, value);
    }

    private boolean searchRec(Node root, int value) {
        if (root == null) return false;
        if (root.value == value) return true;
        return value < root.value ? searchRec(root.left, value) : searchRec(root.right, value);
    }

    // Find the minimum value node
    public int min() {
        Node curr = root;
        while (curr != null && curr.left != null) {
            curr = curr.left;
        }
        return curr != null ? curr.value : Integer.MIN_VALUE;
    }

    // Find the maximum value node
    public int max() {
        Node curr = root;
        while (curr != null && curr.right != null) {
            curr = curr.right;
        }
        return curr != null ? curr.value : Integer.MAX_VALUE;
    }
}

public class Main{
    public static void main(String[] args) {
        BST tree = new BST();

        // Insert values into the BST
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        // In-order traversal of the BST
        System.out.print("In-order traversal: ");
        tree.inorder();  // Expected output: 20 30 40 50 60 70 80

        // Search for values in the BST
        System.out.println("Search for 40: " + tree.search(40));  // true
        System.out.println("Search for 100: " + tree.search(100));  // false

        // Get minimum and maximum values
        System.out.println("Minimum value: " + tree.min());  // 20
        System.out.println("Maximum value: " + tree.max());  // 80
    }
}
